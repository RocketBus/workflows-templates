name: Build stage

on:
  workflow_call:
    inputs:
      app_version:
        type: string
        required: true
        default: ""
      project_language:
        type: string
        required: false
        default: ""
      jdk_version:
        type: string
        required: false
        default: "11"
      node_package_manager:
        type: string
        required: false
        default: 'yarn'
      node_version:
        type: string
        required: false
        default: "lts/*"
      build_artifact_disabled:
        type: boolean
        required: false
        default: false
      build_docker_disabled:
        type: boolean
        required: false
        default: false
      docker_context:
        type: string
        required: false
        default: .
      dockerfile_path:
        type: string
        required: false
        default: Dockerfile
      docker_target:
        type: string
        required: false
        default: ""
      docker_build_args:
        type: string
        required: false
        default: ""
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      maven_settings:
        required: false
    outputs:
      image_repository_uri:
        value: ${{ jobs.build_docker.outputs.image_repository_uri }}
      image_repository:
        value: ${{ jobs.build_docker.outputs.image_repository }}

env:
  AWS_REGION: us-east-1

jobs:
  build_artifact:
    name: Build artifact
    runs-on: live
    if: ${{ !inputs.build_artifact_disabled }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      ###### Build Java

      - name: Java | Create settings.xml file
        run: echo ${{ secrets.maven_settings }} | base64 -d > settings.xml

      - name: Java | Set up JDK
        uses: actions/setup-java@v3
        if: ${{ inputs.project_language == 'java' }}
        with:
          java-version: ${{ inputs.jdk_version }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Java | Package
        if: ${{ inputs.project_language == 'java' }}
        env:
          MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Djava.awt.headless=true"
          MAVEN_CLI_OPTS: "-B -e -fae -V"
        run: mvn $MAVEN_CLI_OPTS -Dmaven.test.skip=true package

      - name: Java | Archive artifact
        if: ${{ inputs.project_language == 'java' }}
        uses: actions/upload-artifact@v3
        with:
          name: app-artifact
          path: |
            **/target/*.jar
          retention-days: 1

      ###### Build Javascript

      - name: Javascript | Setup Node.js
        uses: actions/setup-node@v3
        if: ${{ inputs.project_language == 'javascript' }}
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.node_package_manager }}

      - name: Javascript | Install dependencies
        if: ${{ inputs.project_language == 'javascript' }}
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm ci --prefer-offline --ignore-scripts
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn install --frozen-lockfile --ignore-scripts

      - name: Javascript | Package
        if: ${{ inputs.project_language == 'javascript' }}
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm run build
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn run build

      - name: Javascript | Archive artifact
        if: ${{ inputs.project_language == 'javascript' }}
        uses: actions/upload-artifact@v3
        with:
          name: app-artifact
          path: |
            dist/
            build/
          retention-days: 1

  build_docker:
    name: Build Docker
    runs-on: live
    if: ${{ always() && (!inputs.build_docker_disabled && (needs.build_artifact.result == 'success' || needs.build_artifact.result == 'skipped')) }}
    needs:
      - build_artifact
    outputs:
      image_repository_uri: ${{ steps.setup.outputs.image_repository_uri }}
      image_repository: ${{ steps.setup.outputs.image_repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifact
        if: ${{ !inputs.build_artifact_disabled }}
        uses: actions/download-artifact@v3
        with:
          name: app-artifact

      ###### Build Docker

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup
        id: setup
        env:
          IMAGE_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        run: |
          IMAGE_REPOSITORY=${GITHUB_REPOSITORY#*/}

          echo "::set-output name=image_registry::$IMAGE_REGISTRY"
          echo "::set-output name=image_repository::$IMAGE_REPOSITORY"
          echo "::set-output name=image_repository_uri::${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.setup.outputs.image_repository_uri }}
          tags: |
            type=raw,value=${{ inputs.app_version }}
      
      - name: Docker build
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.dockerfile_path }}
          target: ${{ inputs.docker_target }}
          build-args: ${{ inputs.docker_build_args }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: false
          load: true
          outputs: type=docker,dest=image.tar

      - name: Scan image
        env:
          GRYPE_VERSION: v0.44.0
        run: |
          echo "Installing Grype $GRYPE_VERSION"
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- $GRYPE_VERSION
          ./bin/grype docker-archive:image.tar -q --only-fixed

      ###### Archive container image

      - name: Archive container image
        uses: actions/upload-artifact@v3
        with:
          name: container-image
          path: image.tar
          retention-days: 1
