name: Code stage

on:
  workflow_call:
    inputs:
      jdk_version:
        type: string
        required: false
        default: "11"
      node_package_manager:
        type: string
        required: false
        default: 'yarn'
      node_version:
        type: string
        required: false
        default: "lts/*"
      php_version:
        type: string
        required: false
        default: "latest"
      lint_disabled:
        type: boolean
        required: false
        default: false
    secrets:
      gitversion_config:
        required: false
      maven_settings:
        required: false
    outputs:
      pre_release_tag:
        value: ${{ jobs.prepare.outputs.pre_release_tag }}
      semver:
        value: ${{ jobs.prepare.outputs.semver }}
      short_sha:
        value: ${{ jobs.prepare.outputs.short_sha }}
      project_language:
        value: ${{ jobs.prepare.outputs.project_language }}

jobs:
  prepare:
    name: Prepare
    runs-on: live
    outputs:
      pre_release_tag: ${{ steps.gitversion.outputs.preReleaseTag }}
      semver: ${{ steps.gitversion.outputs.semVer }}
      short_sha: ${{ steps.gitversion.outputs.shortSha }}
      project_language: ${{ steps.project_settings.outputs.language }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
        
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Create GitVersion configuration file
        run: |
          echo ${{ secrets.gitversion_config }} | base64 -d > GitVersion.yml

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      - name: Determine project language
        id: project_settings
        run: |
          [[ -f pom.xml ]] && echo "::set-output name=language::java" || true
          [[ -f package.json ]] && echo "::set-output name=language::javascript" || true
          [[ -f composer.json ]] && echo "::set-output name=language::php" || true

  lint:
    name: Lint
    if: ${{ !inputs.lint_disabled }}
    runs-on: live
    env:
      MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Djava.awt.headless=true"
      MAVEN_CLI_OPTS: "-B -e -fae -V -s settings.xml"
    needs:
      - prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      ###### Lint Java

      - name: Create settings.xml file
        run: echo ${{ secrets.maven_settings }} > settings.xml

      - name: Java | Set up JDK
        uses: actions/setup-java@v3
        if: ${{ needs.prepare.outputs.project_language == 'java' }}
        with:
          java-version: ${{ inputs.jdk_version }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Java | Static code analysis (Linter)
        if: ${{ needs.prepare.outputs.project_language == 'java' }}
        run: mvn $MAVEN_CLI_OPTS checkstyle:checkstyle

      ###### Lint Javascript

      - name: Javascript | Setup Node.js
        uses: actions/setup-node@v3
        if: ${{ needs.prepare.outputs.project_language == 'javascript' }}
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.node_package_manager }}

      - name: Javascript | Install dependencies
        if: ${{ needs.prepare.outputs.project_language == 'javascript' }}
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm ci --prefer-offline --ignore-scripts
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn install --frozen-lockfile --ignore-scripts

      - name: Javascript | Static code analysis (Linter)
        if: ${{ needs.prepare.outputs.project_language == 'javascript' }}
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm run lint
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn run lint

      ###### Lint PHP

      - name: PHP | Cache Composer dependencies
        uses: actions/cache@v3
        if: ${{ needs.prepare.outputs.project_language == 'php' }}
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: PHP | Install dependencies
        uses: php-actions/composer@v6
        if: ${{ needs.prepare.outputs.project_language == 'php' }}
        with:
          php_version: ${{ inputs.php_version }}
          version: latest
          dev: no
          args: --ignore-platform-reqs

      - name: PHP | Static code analysis (Linter)
        if: ${{ needs.prepare.outputs.project_language == 'php' }}
        run: vendor/bin/phplint . --exclude=vendor