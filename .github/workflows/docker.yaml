name: Docker CI

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    outputs:
      IMAGE_TAGS:
        value: ${{ jobs.build.outputs.image_tags }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      aws_account_id: ${{ steps.ci_properties.outputs.aws_account_id }}
      aws_region: ${{ steps.ci_properties.outputs.aws_region }}
      image_name: ${{ steps.ci_properties.outputs.image_name }}
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set ci_properties
        id: ci_properties
        env:
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        run: |
          declare -A AWS_ACCOUNT_ID AWS_REGION
          
          AWS_ACCOUNT_ID[dev]=180811438061
          AWS_ACCOUNT_ID[stage]=406026015868
          AWS_ACCOUNT_ID[live]=114395709799

          AWS_REGION[dev]=us-east-2
          AWS_REGION[stage]=us-east-2
          AWS_REGION[live]=us-east-2

          IMAGE_NAME=${GITHUB_REPOSITORY#*/}

          REGISTRY=${AWS_ACCOUNT_ID[$ENVIRONMENT]}.dkr.ecr.${AWS_REGION[$ENVIRONMENT]}.amazonaws.com
          REPOSITORY=${REGISTRY}/${IMAGE_NAME}

          ROLE_ARN=arn:aws:iam::${AWS_ACCOUNT_ID[$ENVIRONMENT]}:role/CrossAccount-Global-Developer

          echo "::set-output name=aws_account_id::${AWS_ACCOUNT_ID[$ENVIRONMENT]}"
          echo "::set-output name=aws_region::${AWS_REGION[$ENVIRONMENT]}"
          echo "::set-output name=role_arn::${ROLE_ARN}"
          echo "::set-output name=image_name::${IMAGE_NAME}"
          echo "::set-output name=repository::${REPOSITORY}"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.ci_properties.outputs.repository }}
          tags: |
            type=ref,suffix=-{{sha}},event=branch
            type=ref,prefix=pr-,suffix=-{{sha}},event=pr
            type=semver,pattern={{version}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.ci_properties.outputs.aws_region }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ steps.ci_properties.outputs.aws_account_id }}
                  
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          # cache-from: type=registry,ref=${{ steps.ci_properties.outputs.repository }}:buildcache
          # cache-to: type=registry,ref=${{ steps.ci_properties.outputs.repository }}:buildcache,mode=max
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=/tmp/${{ steps.ci_properties.outputs.image_name }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.ci_properties.outputs.image_name }}
          path: /tmp/${{ steps.ci_properties.outputs.image_name }}.tar

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.build.outputs.aws_region }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ needs.build.outputs.aws_account_id }}
                  
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.image_name }}
          path: /tmp
                  
      - name: Push image
        run: |
          docker load --input /tmp/${{ needs.build.outputs.image_name }}.tar
          aws ecr describe-repositories --repository-names ${{ needs.build.outputs.image_name }} 2> /dev/null || aws ecr create-repository --repository-name ${{ needs.build.outputs.image_name }} --image-scanning-configuration scanOnPush=true
          for IMAGE_TAG in ${{ needs.build.outputs.image_tags }}; do docker push ${IMAGE_TAG}; done