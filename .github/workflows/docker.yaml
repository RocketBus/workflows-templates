name: Docker CI

on:
  workflow_call:
    inputs:
      env:
        type: string
        required: true
      promote_image_version:
        type: boolean
        required: false
        default: false
      image_from_env:
        type: string
        required: false
        default: 'stage'
      revision_from_branch:
        type: string
        required: false
        default: 'main'
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
    outputs:
      image_tags:
        value: ${{ jobs.build.outputs.image_tags }}

env:
  ENV: ${{ inputs.env }}
  SRC_ENV: ${{ inputs.image_from_env }}
  AWS_ACCOUNT_ID_DEV: 180811438061
  AWS_ACCOUNT_ID_STAGE: 180811438061
  AWS_ACCOUNT_ID_LIVE: 180811438061
  AWS_REGION_DEV: us-east-2 
  AWS_REGION_STAGE: us-east-2
  AWS_REGION_LIVE: us-east-2

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      aws_account_id: ${{ steps.set_env.outputs.aws_account_id }}
      aws_region: ${{ steps.set_env.outputs.aws_region }}
      ecr_repository: ${{ steps.set_env.outputs.ecr_repository }}
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env
        id: set_env
        run: |
          SRC_AWS_ACCOUNT_ID=AWS_ACCOUNT_ID_${SRC_ENV^^}
          SRC_AWS_ACCOUNT_ID=${!SRC_AWS_ACCOUNT_ID}
          SRC_AWS_REGION=AWS_REGION_${SRC_ENV^^}
          SRC_AWS_REGION=${!SRC_AWS_REGION}
          SRC_ECR_REGISTRY=${SRC_AWS_ACCOUNT_ID}.dkr.ecr.${SRC_AWS_REGION}.amazonaws.com

          echo "SRC_AWS_ACCOUNT_ID=${SRC_AWS_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "SRC_AWS_REGION=${SRC_AWS_REGION}" >> $GITHUB_ENV
          echo "SRC_ECR_REGISTRY=${SRC_ECR_REGISTRY}" >> $GITHUB_ENV

          AWS_ACCOUNT_ID=AWS_ACCOUNT_ID_${ENV^^}
          AWS_ACCOUNT_ID=${!AWS_ACCOUNT_ID}
          AWS_REGION=AWS_REGION_${ENV^^}
          AWS_REGION=${!AWS_REGION}
          ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          ECR_REPOSITORY=${GITHUB_REPOSITORY#*/}

          echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "AWS_REGION=${AWS_REGION}" >> $GITHUB_ENV
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=${ECR_REPOSITORY}" >> $GITHUB_ENV

          AWS_ACCOUNTS_IDS=$(echo "${AWS_ACCOUNT_ID} ${SRC_AWS_ACCOUNT_ID}" | tr ' ' ',' | sed 's/,$//')
          echo "AWS_ACCOUNTS_IDS=${AWS_ACCOUNTS_IDS}" >> $GITHUB_ENV

          echo "::set-output name=aws_account_id::${AWS_ACCOUNT_ID}"
          echo "::set-output name=aws_region::${AWS_REGION}"
          echo "::set-output name=ecr_repository::${ECR_REPOSITORY}"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}"
          tags: |
            type=ref,suffix=-{{sha}},event=branch
            type=ref,prefix=pr-,suffix=-{{sha}},event=pr
            type=semver,pattern={{version}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ env.AWS_ACCOUNTS_IDS }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        uses: docker/build-push-action@v2
        if: ${{ ! inputs.promote_image_version }}
        with:
          context: .
#           cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache
#           cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=/tmp/${{ env.ECR_REPOSITORY }}.tar

      - name: Retag image
        if: ${{ inputs.promote_image_version }}
        run: |
          SRC_IMAGE_TAG=${{ env.SRC_ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ inputs.revision_from_branch }}-${GITHUB_SHA:0:7}
          
          docker pull ${SRC_IMAGE_TAG}
          for IMAGE_TAG in ${{ steps.meta.outputs.tags }}; do docker tag ${SRC_IMAGE_TAG} ${IMAGE_TAG}; done
          docker save ${{ steps.meta.outputs.tags }} -o /tmp/${{ env.ECR_REPOSITORY }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ECR_REPOSITORY }}
          path: /tmp/${{ env.ECR_REPOSITORY }}.tar
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ needs.build.outputs.aws_region }}
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ needs.build.outputs.aws_account_id }}
                  
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.ecr_repository }}
          path: /tmp
                  
      - name: Push image tags
        run: |
          docker load --input /tmp/${{ needs.build.outputs.ecr_repository }}.tar
          ECR_REGISTRY=${{ needs.build.outputs.aws_account_id }}.dkr.ecr.${{ needs.build.outputs.aws_region }}.amazonaws.com
          aws ecr get-login-password --region "${{ needs.build.outputs.aws_region }}" | docker login --username AWS --password-stdin "${ECR_REGISTRY}"
          for IMAGE_TAG in ${{ needs.build.outputs.image_tags }}; do docker push ${IMAGE_TAG}; done
