name: Node.js CI

on:
  workflow_call:
    inputs:
      node_version:
        type: string
        required: false
        default: 18
      node_env:
        type: string
        required: false
      skip_quality_gate_check:
        type: boolean
        required: false
        default: false
      artifact_path:
        type: string
        required: false
        default: 'build/'
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      sonar_token:
        required: true

env:
  YARNRC: ${{ vars.YARNRC }}
  NODE_OPTIONS: "--max_old_space_size=3072"
  NODE_ENV: ${{ inputs.node_env || "production" }}
  CI: true

jobs:
  build:
    name: Build
    runs-on: 
      - self-hosted
      - live
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET cli
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
        env:
          DOTNET_INSTALL_DIR: tools/dotnet

      - name: Set up GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0

      - name: Configure AWS Credentials
        id: aws_credentials_helm
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Create .yarnrc.yml
        run: |
          CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN --domain-owner $CODEARTIFACT_DOMAIN_OWNER --query authorizationToken --output text)
          echo "::add-mask::$CODEARTIFACT_AUTH_TOKEN"
          echo CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN >> $GITHUB_ENV
          echo $YARNRC > ~/.yarnrc.yml
        env:
          CODEARTIFACT_DOMAIN: ${{ vars.CODEARTIFACT_DOMAIN }}
          CODEARTIFACT_DOMAIN_OWNER: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}

      - name: Set up Node.js (npm)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: Install Yarn
        run: npm install --global yarn

      - name: Set up Node.js (yarn)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile
          
          if [[ -f bower.json ]]; then
            yarn install -g bower
            bower install
          fi

      - if: ${{ github.ref_name == github.event.repository.default_branch }}
        name: Update Version
        run: yarn version --new-version ${{ steps.gitversion.outputs.semVer }} --no-git-tag-version

      - name: Lint Code
        run: yarn run lint

      - name: Build Artifact
        run: |
          if [[ $(jq -e ".scripts | has(\"build${BUILD_ENV:+:$BUILD_ENV}\")" package.json) ]]; then
            yarn run build${BUILD_ENV:+:$BUILD_ENV}
          fi

          if [[ -f gulpfile.js ]]; then
            yarn install -g gulp-cli
            gulp build
          fi
        env:
          BUILD_ENV: ${{ inputs.node_env }}

      - name: Archive Application Artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-artifact
          path: ${{ inputs.artifact_path }}
          if-no-files-found: ignore
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}

  test:
    name: Test
    runs-on: 
      - self-hosted
      - live
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        id: aws_credentials_helm
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Create .yarnrc.yml
        run: |
          CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN --domain-owner $CODEARTIFACT_DOMAIN_OWNER --query authorizationToken --output text)
          echo "::add-mask::$CODEARTIFACT_AUTH_TOKEN"
          echo CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN >> $GITHUB_ENV
          echo $YARNRC > ~/.yarnrc.yml
        env:
          CODEARTIFACT_DOMAIN: ${{ vars.CODEARTIFACT_DOMAIN }}
          CODEARTIFACT_DOMAIN_OWNER: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}

      - name: Set up Node.js (npm)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: Install Yarn
        run: npm install --global yarn

      - name: Set up Node.js (yarn)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - if: ${{ github.ref_name == github.event.repository.default_branch }}
        name: Update Version
        run: yarn version --new-version ${{ needs.build.outputs.version }} --no-git-tag-version

      - name: Run Tests
        run: yarn run test

      - name: Set Sonar Parameters
        id: set_sonar_parameters
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            SONAR_PARAMETERS="-Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
              -Dsonar.pullrequest.branch=${{ github.head_ref }} \
              -Dsonar.pullrequest.base=${{ github.base_ref }}
              -Dsonar.pullrequest.github.repository=$GITHUB_REPOSITORY"
          elif [[ ${{ github.event_name }} == 'push' && ${{ github.ref_name }} != ${{ github.event.repository.default_branch }} ]]; then
            SONAR_PARAMETERS="-Dsonar.branch.name=${{ github.ref_name }}"
          fi

          echo "args=$SONAR_PARAMETERS" >> $GITHUB_OUTPUT

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            ${{ steps.set_sonar_parameters.outputs.args }}
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - if: ${{ ! inputs.skip_quality_gate_check }}
        name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  release:
    if: ${{ github.ref_name == github.event.repository.default_branch }}
    name: Release
    runs-on: 
      - self-hosted
      - live
    needs:
      - build
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        id: aws_credentials_helm
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ vars.CODEARTIFACT_REGION }}

      - name: Create .yarnrc.yml
        run: |
          CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN --domain-owner $CODEARTIFACT_DOMAIN_OWNER --query authorizationToken --output text)
          echo "::add-mask::$CODEARTIFACT_AUTH_TOKEN"
          echo CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN >> $GITHUB_ENV
          echo $YARNRC > ~/.yarnrc.yml
        env:
          CODEARTIFACT_DOMAIN: ${{ vars.CODEARTIFACT_DOMAIN }}
          CODEARTIFACT_DOMAIN_OWNER: ${{ vars.CODEARTIFACT_DOMAIN_OWNER }}

      - name: Set up Node.js (npm)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: Install Yarn
        run: npm install --global yarn

      - name: Set up Node.js (yarn)
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn

      - name: Release Prepare
        run: yarn version --new-version ${{ needs.build.outputs.version }} --no-git-tag-version

      - name: Download Application Artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifact

      - name: Release Artifact
        run: yarn publish

      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}

      - name: Bump Version
        run: |
          yarn version --patch --no-git-tag-version
          git config user.email "github-actions@clickbus.com"
          git config user.name "Github Actions"
          git commit -a -m "chore: bump version [skip ci]" || echo "nothing to commit, proceed"
          git push