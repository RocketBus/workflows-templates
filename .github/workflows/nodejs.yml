name: Node.js CI

on:
  workflow_call:
    inputs:
      node_package_manager:
        type: string
        required: false
        default: yarn
      node_version:
        type: string
        required: false
        default: 11
      package_disabled:
        type: boolean
        required: false
        default: false
      environment:
        type: string
        required: false
        default: "live"
      skip_quality_gate_check:
        type: boolean
        required: false
        default: false
    secrets:
      nexus_username:
        required: true
      nexus_password:
        required: true
      sonar_token:
        required: true

env:
  NEXUS_USERNAME: ${{ secrets.nexus_username }}
  NEXUS_PASSWORD: ${{ secrets.nexus_password }}
  SONAR_HOST_URL: "https://sonar.clickbus.net"
  SONAR_TOKEN: ${{ secrets.sonar_token }}
  NODE_OPTIONS: "--max_old_space_size=4096"

jobs:
  job_properties:
    name: job properties
    runs-on: live
    outputs:
      namespace: ${{ steps.job_properties.outputs.namespace }}
      aws_region: ${{ steps.job_properties.outputs.aws_region }}
      aws_iam_role: ${{ steps.job_properties.outputs.aws_iam_role }}
    steps:
      - name: set job properties
        id: job_properties
        run: |
          declare -A AWS_ACCOUNTS_IDS AWS_REGIONS
          
          AWS_ACCOUNTS_IDS=([dev]=180811438061 [stg]=406026015868 [live]=114395709799)
          AWS_REGIONS=([dev]=us-east-2 [stg]=us-east-2 [live]=us-east-1)
          
          AWS_ACCOUNT_ID=${AWS_ACCOUNTS_IDS[$ENV]}
          AWS_REGION=${AWS_REGIONS[$ENV]}          
          NAMESPACE=$(ls charts)

          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
          echo "aws_region=$AWS_REGION" >> $GITHUB_OUTPUT
          echo "aws_iam_role=arn:aws:iam::${AWS_ACCOUNT_ID}:role/CrossAccount-Global-Admin" >> $GITHUB_OUTPUT

  lint:
    name: lint
    runs-on: ${{ inputs.environment }}
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: install Yarn
        if: ${{ inputs.node_package_manager == 'yarn' }}
        run: npm install --global yarn

      - name: setup Yarn cache
        uses: actions/setup-node@v3
        if: ${{ inputs.node_package_manager == 'yarn' }}
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn

      - name: install dependencies
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm ci --prefer-offline
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn install --frozen-lockfile
          fi

      - name: lint code
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm run lint
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn run lint
          fi

  unit_tests:
    name: unit tests
    runs-on: ${{ inputs.environment }}
    needs:
      - job_properties
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: install Yarn
        if: ${{ inputs.node_package_manager == 'yarn' }}
        run: npm install --global yarn

      - name: setup Yarn cache
        uses: actions/setup-node@v3
        if: ${{ inputs.node_package_manager == 'yarn' }}
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn

      - name: install dependencies
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm ci --prefer-offline
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn install --frozen-lockfile
          fi

      - name: execute unit tests
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm run test
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn run test
          fi

      - name: Create unit-tests-report.tar.gz
        run: |
          tar -czvf unit-tests-report.tar.gz coverage/

      - name: Archive Application Artifact
        uses: RocketBus/actions/.github/actions/utils/s3-artifact-upload@acme-3879
        with:
          name: unit-tests-report-${{needs.job_properties.outputs.namespace}}-${{ github.run_id }}.tar.gz
          paths: 'unit-tests-report.tar.gz'
          bucket_region: ${{needs.job_properties.outputs.aws_region}}
          bucket_name: ${{ needs.job_properties.outputs.namespace }}
          actions_iam_role: ${{ needs.job_properties.outputs.aws_iam_role }}


  integration_tests:
    name: integration tests
    runs-on: ${{ inputs.environment }}
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: install Yarn
        if: ${{ inputs.node_package_manager == 'yarn' }}
        run: npm install --global yarn

      - name: setup Yarn cache
        uses: actions/setup-node@v3
        if: ${{ inputs.node_package_manager == 'yarn' }}
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn

      - name: install dependencies
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm ci --prefer-offline
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn install --frozen-lockfile
          fi

      - name: execute integration tests
        continue-on-error: true
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm run test:integration
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn run test:integration
          fi

  audit:
    name: audit dependencies
    runs-on: ${{ inputs.environment }}
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: install Yarn
        if: ${{ inputs.node_package_manager == 'yarn' }}
        run: npm install --global yarn

      - name: execute audit
        continue-on-error: true
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm audit --audit-level=high
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn audit --level high
          fi

  sonarqube:
    name: sonarqube
    runs-on: ${{ inputs.environment }}
    needs:
      - job_properties
      - lint
      - unit_tests
      - integration_tests
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: install Yarn
        if: ${{ inputs.node_package_manager == 'yarn' }}
        run: npm install --global yarn

      - name: setup Yarn cache
        uses: actions/setup-node@v3
        if: ${{ inputs.node_package_manager == 'yarn' }}
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn

      - name: install dependencies
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm ci --prefer-offline
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn install --frozen-lockfile
          fi

      - name: Download Application Artifact
        uses: RocketBus/actions/.github/actions/utils/s3-artifact-download@acme-3879
        with:
          name: unit-tests-report-${{needs.job_properties.outputs.namespace}}-${{ github.run_id }}
          bucket_region: ${{needs.job_properties.outputs.aws_region}}
          bucket_name: ${{ needs.job_properties.outputs.namespace }}
          actions_iam_role: ${{ needs.job_properties.outputs.aws_iam_role }}
          path: coverage

      - name: set sonar parameters
        id: set_sonar_parameters
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            SONAR_PARAMETERS="$SONAR_PARAMETERS -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} -Dsonar.pullrequest.github.repository=$GITHUB_REPOSITORY"
          fi

          if [[ ${{ github.event_name }} == 'push' && ${{ github.ref_type }} == 'tag' ]]; then
            SONAR_PARAMETERS="$SONAR_PARAMETERS -Dsonar.branch.name=${{ github.event.repository.default_branch }}"
          fi

          echo "args=$SONAR_PARAMETERS" >> $GITHUB_OUTPUT

      - name: sonarqube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            ${{ steps.set_sonar_parameters.outputs.args }}

      - name: sonarqube quality gate check
        if: (github.event_name == 'pull_request') && (! inputs.skip_quality_gate_check)
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5

  package:
    name: package
    runs-on: ${{ inputs.environment }}
    needs:
      - job_properties
      - sonarqube
    if: ${{ !inputs.package_disabled && ((github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag')) }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm

      - name: install Yarn
        if: ${{ inputs.node_package_manager == 'yarn' }}
        run: npm install --global yarn

      - name: setup Yarn cache
        uses: actions/setup-node@v3
        if: ${{ inputs.node_package_manager == 'yarn' }}
        with:
          node-version: ${{ inputs.node_version }}
          cache: yarn

      - name: install dependencies
        run: |
          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm ci --prefer-offline
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            yarn install --frozen-lockfile
          fi

      - name: package artifact
        id: package_artifact
        run: |
          if [[ -n "${{ inputs.environment }}" ]]; then
            NODE_ENV_SCRIPT=${{ inputs.environment }}
          fi

          if [[ ${{ inputs.node_package_manager }} == 'npm' ]]; then
            npm run build${NODE_ENV_SCRIPT:+:$NODE_ENV_SCRIPT}
          elif [[ ${{ inputs.node_package_manager }} == 'yarn' ]]; then
            npm install --global yarn
            yarn run build${NODE_ENV_SCRIPT:+:$NODE_ENV_SCRIPT}
          fi

      - name: Create unit-tests-report.tar.gz
        run: |
          tar -czvf unit-tests-report.tar.gz dist/ build/

      - name: Archive Application Artifact
        uses: RocketBus/actions/.github/actions/utils/s3-artifact-upload@acme-3879
        with:
          name: unit-tests-report-${{needs.job_properties.outputs.namespace}}-${{ github.run_id }}.tar.gz
          paths: 'unit-tests-report.tar.gz'
          bucket_region: ${{needs.job_properties.outputs.aws_region}}
          bucket_name: ${{ needs.job_properties.outputs.namespace }}
          actions_iam_role: ${{ needs.job_properties.outputs.aws_iam_role }}

  release:
    name: release
    runs-on: ${{ inputs.environment }}
    needs:
      - package
    if: ${{ always() && (needs.package.result == 'success' || needs.package.result == 'skipped') && (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: create github release
        uses: softprops/action-gh-release@v1
