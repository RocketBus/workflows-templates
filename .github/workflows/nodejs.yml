name: Node.js CI

on:
  workflow_call:
    inputs:
      node_package_manager:
        type: string
        required: false
        default: yarn
      node_version:
        type: string
        required: false
        default: 11
      package_disabled:
        type: boolean
        required: false
        default: false
    secrets:
      nexus_username:
        required: true
      nexus_password:
        required: true
      sonar_token:
        required: true

env:
  NEXUS_USERNAME: ${{ secrets.nexus_username }}
  NEXUS_PASSWORD: ${{ secrets.nexus_password }}
  SONAR_HOST_URL: "https://sonar.clickbus.net"
  SONAR_TOKEN: ${{ secrets.sonar_token }}

jobs:
  lint:
    name: lint
    runs-on: live
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.node_package_manager }}

      - name: install dependencies
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm ci --prefer-offline
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn install --frozen-lockfile

      - name: lint code
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm run lint
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn run lint

  unit_tests:
    name: unit tests
    runs-on: live
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.node_package_manager }}

      - name: install dependencies
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm ci --prefer-offline
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn install --frozen-lockfile

      - name: execute unit tests
        continue-on-error: true
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm run test
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn run test

      - name: archive unit tests report
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-report
          path: |
            junit.xml
            coverage/cobertura-coverage.xml

  integration_tests:
    name: integration tests
    runs-on: live
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.node_package_manager }}

      - name: install dependencies
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm ci --prefer-offline
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn install --frozen-lockfile

      - name: execute integration tests
        continue-on-error: true
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm run test:integration
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn run test:integration

  sonarqube:
    name: sonarqube
    runs-on: live
    needs:
      - unit_tests
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: download unit tests report
        uses: actions/download-artifact@v3
        with:
          name: unit-tests-report

      - name: set sonar parameters
        id: set_sonar_parameters
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            SONAR_PARAMETERS="-Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} -Dsonar.pullrequest.github.repository=$GITHUB_REPOSITORY"
          fi
          echo "args=$SONAR_PARAMETERS" >> $GITHUB_OUTPUT

      - name: sonarqube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.testExecutionReportPaths=junit.xml
            -Dsonar.javascript.lcov.reportPaths=coverage/cobertura-coverage.xml
            ${{ steps.set_sonar_parameters.outputs.args }}

      - name: sonarqube quality gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        continue-on-error: true

  package:
    name: package
    runs-on: live
    needs:
      - sonarqube
    if: ${{ !inputs.package_disabled && ((github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag')) }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.node_package_manager }}

      - name: install dependencies
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm ci --prefer-offline
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn install --frozen-lockfile

      - name: package artifact
        id: package_artifact
        run: |
          [[ ${{ inputs.node_package_manager }} == 'npm' ]] && npm run build
          [[ ${{ inputs.node_package_manager }} == 'yarn' ]] && yarn run build

      - name: archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-artifact
          path: |
            dist/
            build/

  release:
    name: package
    runs-on: live
    needs:
      - package
    if: ${{ always() && (needs.package.result == 'success' || needs.package.result == 'skipped') && (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: create github release
        uses: softprops/action-gh-release@v1