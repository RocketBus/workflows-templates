name: Container CI with Docker

on:
  workflow_call:
    inputs:
      project_name:
        type: string
        required: true
      gitversion:
        type: string
        required: true
      docker_context:
        type: string
        required: false
        default: .
      dockerfile_path:
        type: string
        required: false
        default: Dockerfile
      docker_target:
        type: string
        required: false
        default: ""
      docker_build_args:
        type: string
        required: false
        default: ""
      scan_severity_cutoff:
        type: string
        required: false
        default: medium
      scan_fail_build:
        type: boolean
        required: false
        default: true
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
    outputs:
      image_tag:
        value: ${{ jobs.build.outputs.image_tag }}

env:
  AWS_REGION: us-east-1

jobs:
  lint:
    name: lint
    runs-on: live
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'branch') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: lint dockerfile
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: ${{ inputs.dockerfile_path }}

  build:
    name: build
    runs-on: live
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'branch') || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifact

      - name: setup Docker context for Buildx
        id: buildx-context
        run: docker context create builders

      - name: setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false

      - name: login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: set image properties
        id: image_properties
        run: |
          IMAGE_REGISTRY=${{ steps.login_ecr.outputs.registry }}
          IMAGE_REPOSITORY=${{ inputs.project_name }}
          echo "${{ fromJson(inputs.gitversion) }}"
          echo "${{ inputs.gitversion }}"
          # MAJOR_MINOR_PATCH=${{ fromJson(inputs.gitversion).MajorMinorPatch }}
          # ESCAPED_BRANCH_NAME=${{ fromJson(inputs.gitversion).EscapedBranchName }}
          # SHORT_SHA=${{ fromJson(inputs.gitversion).ShortSha }}
          IMAGE_TAG="${MAJOR_MINOR_PATCH}-${ESCAPED_BRANCH_NAME}.${SHORT_SHA}"

          if [[ ${{ github.event_name == 'push' && github.ref_type == 'tag' }} ]]; then
            IMAGE_TAG=${{ github.ref_name }}
          fi

          echo "::set-output name=image_registry::$IMAGE_REGISTRY"
          echo "::set-output name=image_repository::$IMAGE_REPOSITORY"
          echo "::set-output name=image_repository_uri::${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}"
          echo "::set-output name=image_tag::${IMAGE_TAG}"

      - name: docker metadata
        id: docker_metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.image_properties.outputs.image_registry }}/${{ steps.image_properties.outputs.image_repository }}
          tags: |
            type=raw,value=${{ steps.image_properties.outputs.image_tag }}

      - name: setup ECR repository
        run: |
          aws ecr describe-repositories --repository-names ${{ steps.image_properties.outputs.image_repository }} 2> /dev/null || \
            aws ecr create-repository --repository-name ${{ steps.image_properties.outputs.image_repository }} --image-scanning-configuration scanOnPush=true

          aws ecr set-repository-policy \
            --repository-name ${{ steps.image_properties.outputs.image_repository }} \
            --policy-text '
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "AllowPull",
                    "Action": [
                      "ecr:GetAuthorizationToken",
                      "ecr:BatchCheckLayerAvailability",
                      "ecr:GetDownloadUrlForLayer",
                      "ecr:GetRepositoryPolicy",
                      "ecr:DescribeRepositories",
                      "ecr:ListImages",
                      "ecr:DescribeImages",
                      "ecr:BatchGetImage",
                      "ecr:GetLifecyclePolicy",
                      "ecr:GetLifecyclePolicyPreview",
                      "ecr:ListTagsForResource",
                      "ecr:DescribeImageScanFindings"
                    ],
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": [
                        "arn:aws:iam::180811438061:root",
                        "arn:aws:iam::406026015868:root",
                        "arn:aws:iam::114395709799:root"
                      ]
                    }
                  }
                ]
              }
            '

      - name: docker build and push
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.dockerfile_path }}
          target: ${{ inputs.docker_target }}
          build-args: ${{ inputs.docker_build_args }}
          labels: ${{ steps.docker_metadata.outputs.labels }}
          tags: ${{ steps.docker_metadata.outputs.tags }}
          push: true

      - name: scan image
        if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'branch') }}
        run: |
          IMAGE_TAG=${{ steps.image_properties.outputs.image_tag }}

          aws ecr wait image-scan-complete --repository-name ${{ steps.image_properties.outputs.image_repository }} --image-id imageTag=$IMAGE_TAG

          if [[ $? -eq 0 ]]; then
            SEVERITY_LEVEL=${{ inputs.scan_severity_cutoff }}
            SEVERITY_LEVEL=${SEVERITY_LEVEL^^}
            SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --repository-name ${{ steps.image_properties.outputs.image_repository }} --image-id imageTag=$IMAGE_TAG --query imageScanFindings.findingSeverityCounts.$SEVERITY_LEVEL)

            if [[ $SCAN_FINDINGS -gt 0 ]]; then
              echo "## Vulnerability summary :shield:" >> $GITHUB_STEP_SUMMARY
              aws ecr describe-image-scan-findings --repository-name ${{ steps.image_properties.outputs.image_repository }} --image-id imageTag=$IMAGE_TAG --query "imageScanFindings.findings[?severity=='MEDIUM'].{Name: name, Severity: severity, Package: attributes[?key=='package_name'].value | join('', @), Version: attributes[?key=='package_version'].value | join('', @)}" --output table | sed s/'+'/'|'/g | tail -n +4 | head -n -1 >> $GITHUB_STEP_SUMMARY

              if [[ ${{ inputs.scan_fail_build }} ]]; then
                aws ecr batch-delete-image --repository-name ${{ steps.image_properties.outputs.image_repository }} --image-ids imageTag=$IMAGE_TAG
                echo "::error title=Image Scanning::Failed minimum severity level. Found vulnerabilities with level ${SEVERITY_LEVEL} or higher"
                exit 1
              else
                echo "::warning title=Image Scanning::Warning minimum severity level. Found vulnerabilities with level ${SEVERITY_LEVEL} or higher"
              fi
            fi
          fi
    outputs:
      image_tag: ${{ steps.image_properties.outputs.image_tag }}
