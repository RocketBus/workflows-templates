name: Docker CI

on:
  workflow_call:
    inputs:
      dockerfile_path:
        type: string
        required: false
        default: Dockerfile
      docker_context:
        type: string
        required: false
        default: .
      docker_target:
        type: string
        required: false
        default: ""
      docker_build_args:
        type: string
        required: false
        default: ""
      image_name:
        type: string
        required: true
      image_tag_suffix:
        type: string
        required: false
        default: ""
      scan_severity_cutoff:
        type: string
        required: false
        default: low
      scan_fail_build:
        type: boolean
        required: false
        default: true
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

jobs:
  build:
    name: Build
    runs-on: live
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET cli
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
        env:
          DOTNET_INSTALL_DIR: tools/dotnet

      - name: Set up GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          additionalArguments: >
            /overrideconfig mode=ContinuousDelivery

      - name: Download Application Artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifact

      - name: Lint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ inputs.dockerfile_path }}

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ vars.ECR_REGION }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Metadata
        id: docker_metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login_ecr.outputs.registry }}/${{ inputs.image_name }}
          tags: |
            type=ref,event=pr,prefix=${{ steps.gitversion.outputs.semVer }}-,suffix=.{{sha}}
            type=raw,value=${{ steps.gitversion.outputs.semVer }},suffix=${{ inputs.image_tag_suffix }}

      - name: Set Image Properties
        id: image_properties
        run: |
          IMAGE_TAGS=(${{ steps.docker_metadata.outputs.tags }})
          FIRST_IMAGE_TAG=${IMAGE_TAGS[0]}
          IMAGE_TAG=${FIRST_IMAGE_TAG##*:}

          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image=$FIRST_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up ECR Repository
        run: |
          aws ecr describe-repositories \
            --repository-names ${{ inputs.image_name }} 2> /dev/null || \
          aws ecr create-repository \
            --repository-name ${{ inputs.image_name }} \
            --image-scanning-configuration scanOnPush=true 

          aws ecr set-repository-policy \
            --repository-name ${{ inputs.image_name }} \
            --policy-text '
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "AllowPull",
                    "Action": [
                      "ecr:GetAuthorizationToken",
                      "ecr:BatchCheckLayerAvailability",
                      "ecr:GetDownloadUrlForLayer",
                      "ecr:GetRepositoryPolicy",
                      "ecr:DescribeRepositories",
                      "ecr:ListImages",
                      "ecr:DescribeImages",
                      "ecr:BatchGetImage",
                      "ecr:GetLifecyclePolicy",
                      "ecr:GetLifecyclePolicyPreview",
                      "ecr:ListTagsForResource",
                      "ecr:DescribeImageScanFindings"
                    ],
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": [
                        "arn:aws:iam::180811438061:root",
                        "arn:aws:iam::406026015868:root",
                        "arn:aws:iam::114395709799:root"
                      ]
                    }
                  }
                ]
              }
            '

      - name: Docker Build
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.dockerfile_path }}
          target: ${{ inputs.docker_target }}
          build-args: ${{ inputs.docker_build_args }}
          labels: ${{ steps.docker_metadata.outputs.labels }}
          tags: ${{ steps.image_properties.outputs.image }}
          outputs: type=docker,dest=/tmp/image.tar.gz

      - name: Docker Push
        run: |
          echo "Pushing image to ECR..."
          docker load -i /tmp/image.tar.gz
          docker push ${{ steps.image_properties.outputs.image }}

      - name: Check Image Scan
        run: |
          IMAGE_REPOSITORY=${{ inputs.image_name }}
          IMAGE_TAG=${{ steps.image_properties.outputs.image_tag }}

          aws ecr wait image-scan-complete --repository-name $IMAGE_REPOSITORY --image-id imageTag=$IMAGE_TAG

          if [[ $? -eq 0 ]]; then
            SEVERITY_CUTOFF=${{ inputs.scan_severity_cutoff }}
            SEVERITY_CUTOFF=${SEVERITY_CUTOFF^^}

            SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --repository-name $IMAGE_REPOSITORY --image-id imageTag=$IMAGE_TAG --query imageScanFindings.findingSeverityCounts)

            case $SEVERITY_CUTOFF in
              CRITICAL)
                SCAN_FINDINGS_COUNT=$(echo $SCAN_FINDINGS | jq -r '[.CRITICAL, .HIGH, .MEDIUM, .LOW, .INFORMATIONAL, .UNDEFINED] | add')
              ;;
              HIGH)
                SCAN_FINDINGS_COUNT=$(echo $SCAN_FINDINGS | jq -r '[.HIGH, .MEDIUM, .LOW, .INFORMATIONAL, .UNDEFINED] | add')
              ;;
              MEDIUM)
                SCAN_FINDINGS_COUNT=$(echo $SCAN_FINDINGS | jq -r '[.MEDIUM, .LOW, .INFORMATIONAL, .UNDEFINED] | add')
              ;;
              LOW)
                SCAN_FINDINGS_COUNT=$(echo $SCAN_FINDINGS | jq -r '[.LOW, .INFORMATIONAL, .UNDEFINED] | add')
              ;;
              INFORMATIONAL)
                SCAN_FINDINGS_COUNT=$(echo $SCAN_FINDINGS | jq -r '[.INFORMATIONAL, .UNDEFINED] | add')
              ;;
              UNDEFINED)
                SCAN_FINDINGS_COUNT=$(echo $SCAN_FINDINGS | jq -r '[.UNDEFINED] | add')
              ;;
            esac

            echo "## Vulnerability summary :shield:" >> $GITHUB_STEP_SUMMARY
            aws ecr describe-image-scan-findings --repository-name $IMAGE_REPOSITORY --image-id imageTag=$IMAGE_TAG --query "imageScanFindings.findings[].{Name: name, Severity: severity, Package: join(':', [attributes[?key=='package_name'].value | join('', @), attributes[?key=='package_version'].value | join('', @)])}" --output table | sed s/'+'/'|'/g | tail -n +4 | head -n -1 >> $GITHUB_STEP_SUMMARY

            if [[ $SCAN_FINDINGS_COUNT -gt 0 ]]; then
              if ${{ inputs.scan_fail_build }}; then
                aws ecr batch-delete-image --repository-name $IMAGE_REPOSITORY --image-ids imageTag=$IMAGE_TAG
                echo "::error title=image scan::Failed minimum severity level. Found vulnerabilities with level ${SEVERITY_CUTOFF,,} or higher"
                exit 1
              else
                echo "::warning title=image scan::Warning minimum severity level. Found vulnerabilities with level ${SEVERITY_CUTOFF,,} or higher"
              fi
            fi
          fi