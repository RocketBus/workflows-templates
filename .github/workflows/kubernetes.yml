name: Kubernetes CD with Helm

on:
  workflow_call:
    inputs:
      project_name:
        type: string
        required: true
      environment:
        type: string
        required: true
      image_tag:
        type: string
        required: true
      squad:
        type: string
        required: false
    secrets:
      git_access_token:
        required: true
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

jobs:
  validate_branch_name:
    name: validate branch name 
    runs-on: ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    env:
      ENV: ${{ inputs.environment }}
    steps:
      - name: validate branch name
        if: ${{ !(inputs.squad == 'cabal' || inputs.squad == 'hive' || inputs.squad == 'fallen' || inputs.squad == 'vex' || inputs.squad == 'eval') }}
        run: echo::error 'Branch name doesn't match the required pattern'
          - exit 1

  deploy:
    name: deploy
    runs-on: ${{ inputs.environment }}
    needs:
      - validate_branch_name
    environment: ${{ inputs.environment }}
    env:
      ENV: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.git_access_token }}

      - name: set job properties
        id: job_properties
        run: |
          declare -A AWS_ACCOUNTS_IDS AWS_REGIONS EKS_CLUSTERS

          AWS_ACCOUNTS_IDS=([dev]=180811438061 [stg]=406026015868 [live]=114395709799)
          AWS_REGIONS=([dev]=us-east-2 [stg]=us-east-2 [live]=us-east-1)
          EKS_CLUSTERS=([dev]=k8s-dev-85c52b0e [stg]=k8s-stg-7a1d63f9 [live]=k8s-live-b2401546)

          AWS_ACCOUNT_ID=${AWS_ACCOUNTS_IDS[$ENV]}
          AWS_REGION=${AWS_REGIONS[$ENV]}
          EKS_CLUSTER=${EKS_CLUSTERS[$ENV]}

          echo "aws_region=$AWS_REGION" >> $GITHUB_OUTPUT
          echo "aws_iam_role=arn:aws:iam::${AWS_ACCOUNT_ID}:role/CrossAccount-Global-Admin" >> $GITHUB_OUTPUT
          echo "eks_cluster=$EKS_CLUSTER" >> $GITHUB_OUTPUT

          echo RELEASE_NAME=${{ inputs.project_name }} >> $GITHUB_ENV
          echo NAMESPACE=${{ inputs.project_name }} >> $GITHUB_ENV
          echo CHART_PATH=charts/${{ inputs.project_name }} >> $GITHUB_ENV
                
          echo "ENVIRONMENT=${{ inputs.squad }}" >> $GITHUB_OUTPUT

      - name: configure AWS credentials for Helm
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: us-east-1

      - name: Helm dependency update
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          aws ecr get-login-password | helm registry login \
            --username AWS \
            --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com

          if [[ -f ${CHART_PATH}/Chart.yaml ]]; then
            helm dep up $CHART_PATH
          fi

      - name: configure AWS credentials for EKS
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ steps.job_properties.outputs.aws_region }}
          role-skip-session-tagging: true
          role-to-assume: ${{ steps.job_properties.outputs.aws_iam_role }}
          role-duration-seconds: 1200
          role-session-name: GitHubActionsDeploySession
          mask-aws-account-id: false
  
      - name: update image tag
        run: |
          IMAGE_TAG=${{ inputs.image_tag }}
          export APP_VERSION=${IMAGE_TAG#v}
          if [[ -f ${CHART_PATH}/Chart.yaml ]]; then
            yq -i '.appVersion = env(APP_VERSION)' ${CHART_PATH}/Chart.yaml
          fi
          if [[ $(yq '.nginx.image.tag' ${CHART_PATH}/environments/${{ steps.job_properties.outputs.environment }}/values.yaml) != null ]]; then
            yq -i '.nginx.image.tag = env(APP_VERSION)' ${CHART_PATH}/environments/${{ steps.job_properties.outputs.environment }}/values.yaml
          fi
          yq -i '.image.tag = env(APP_VERSION)' ${CHART_PATH}/environments/${{ steps.job_properties.outputs.environment }}/values.yaml
#          git config user.email "github-actions@clickbus.com"
#          git config user.name "Github Actions"
#          git add ${CHART_PATH}/environments/${{ inputs.environment }}/values.yaml
#          git commit -m "chore: update ${{ inputs.environment }} version to $APP_VERSION [skip ci]" || echo "nothing to commit, proceed"
#          git push

      - name: Helm upgrade
        run: |
          aws eks update-kubeconfig --name ${{ steps.job_properties.outputs.eks_cluster }}

          RELEASE_NAME=${{ inputs.squad }}-${{ inputs.project_name }}

          if [[ -f ${CHART_PATH}/environments/dev/values_common.yaml ]]; then
            HELM_ARGS="$HELM_ARGS --values -f ${CHART_PATH}/environments/dev/values_common.yaml"
          fi

          if [[ -f ${CHART_PATH}/environments/dev/secrets_common.yaml ]]; then
            sops -d ${CHART_PATH}/environments/dev/secrets_common.yaml > ${CHART_PATH}/environments/dev/secrets_common.yaml.dec
            HELM_ARGS="$HELM_ARGS --values ${CHART_PATH}/environments/dev/secrets_common.yaml.dec"
          fi

          if [[ -f ${CHART_PATH}/environments/${{ steps.job_properties.outputs.environment }}/secrets.yaml ]]; then
            sops -d ${CHART_PATH}/environments/${{ steps.job_properties.outputs.environment }}/secrets.yaml > ${CHART_PATH}/environments/${{ steps.job_properties.outputs.environment }}/secrets.yaml.dec
            HELM_ARGS="$HELM_ARGS --values ${CHART_PATH}/environments/${{ steps.job_properties.outputs.environment }}/secrets.yaml.dec"
          fi

          helm upgrade \
            --install $RELEASE_NAME $CHART_PATH \
            --create-namespace --namespace $NAMESPACE \
            --wait \
            --values ${CHART_PATH}/environments/${{ steps.job_properties.outputs.environment }}/values.yaml $HELM_ARGS

  cleanup:
    name: cleanup
    runs-on: ${{ inputs.environment }}
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
    env:
      ENV: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: set job properties
        id: job_properties
        run: |
          declare -A AWS_ACCOUNTS_IDS AWS_REGIONS EKS_CLUSTERS
          
          AWS_ACCOUNTS_IDS=([dev]=180811438061 [stg]=406026015868 [live]=114395709799)
          AWS_REGIONS=([dev]=us-east-2 [stg]=us-east-2 [live]=us-east-1)
          EKS_CLUSTERS=([dev]=k8s-dev-85c52b0e [stg]=k8s-stg-7a1d63f9 [live]=k8s-live-b2401546)

          AWS_ACCOUNT_ID=${AWS_ACCOUNTS_IDS[$ENV]}
          AWS_REGION=${AWS_REGIONS[$ENV]}
          EKS_CLUSTER=${EKS_CLUSTERS[$ENV]}

          echo "aws_region=$AWS_REGION" >> $GITHUB_OUTPUT
          echo "aws_iam_role=arn:aws:iam::${AWS_ACCOUNT_ID}:role/CrossAccount-Global-Admin" >> $GITHUB_OUTPUT
          echo "eks_cluster=$EKS_CLUSTER" >> $GITHUB_OUTPUT

          echo RELEASE_NAME=${{ inputs.project_name }} >> $GITHUB_ENV
          echo NAMESPACE=${{ inputs.project_name }} >> $GITHUB_ENV
          echo CHART_PATH=charts/${{ inputs.project_name }} >> $GITHUB_ENV

      - name: configure AWS credentials for EKS
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ steps.job_properties.outputs.aws_region }}
          role-skip-session-tagging: true
          role-to-assume: ${{ steps.job_properties.outputs.aws_iam_role }}
          role-duration-seconds: 1200
          role-session-name: GitHubActionsDeploySession
          mask-aws-account-id: false

      - name: Helm uninstall PR
        run: |
          aws eks update-kubeconfig --name ${{ steps.job_properties.outputs.eks_cluster }}

          PREFIX=pr-${{ github.event.number }}
          RELEASE_NAME=${PREFIX}-${RELEASE_NAME}

          helm uninstall $RELEASE_NAME -n $NAMESPACE
