name: Java CI with Maven

on:
  workflow_call:
    inputs:
      jdk_version:
        type: string
        required: false
        default: 11
      skip_tests:
        type: boolean
        required: false
        default: false
      skip_lint:
        type: boolean
        required: false
        default: false
      skip_quality_gate_check:
        type: boolean
        required: false
        default: false
    secrets:
      maven_settings:
        required: true
      nexus_username:
        required: true
      nexus_password:
        required: true
      sonar_token:
        required: true

env:
  MAVEN_CLI_OPTS: "-B -U -e -fae -ntp -V"
  MAVEN_OPTS: "-Xmx1024m -Xms512m -Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -Dfile.encoding=UTF-8"
  NEXUS_USERNAME: ${{ secrets.nexus_username }}
  NEXUS_PASSWORD: ${{ secrets.nexus_password }}
  SONAR_HOST_URL: "https://sonar.clickbus.net"
  SONAR_TOKEN: ${{ secrets.sonar_token }}

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    name: lint
    runs-on: live
    if: ${{ ((github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag'))  && (! inputs.skip_lint) }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.jdk_version }}
          distribution: 'temurin'
          cache: 'maven'
          overwrite-settings: false

      - name: create settings.xml
        run: echo ${{ secrets.maven_settings }} | base64 -d > ~/.m2/settings.xml

      - name: lint code
        run: ./mvnw $MAVEN_CLI_OPTS spotless:check

  test:
    name: test
    runs-on: live
    if: ${{ ((github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag')) && (! inputs.skip_tests) }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.jdk_version }}
          distribution: 'temurin'
          cache: 'maven'
          overwrite-settings: false

      - name: create settings.xml
        run: echo ${{ secrets.maven_settings }} | base64 -d > ~/.m2/settings.xml

      - name: execute unit tests
        run: ./mvnw $MAVEN_CLI_OPTS verify -Dsonar.skip=true

      - name: setup JDK for SonarQube
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
          cache: 'maven'
          overwrite-settings: false

      - name: sonarqube scan
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            SONAR_PARAMETERS="$SONAR_PARAMETERS -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} -Dsonar.pullrequest.github.repository=$GITHUB_REPOSITORY"
          fi

          #if [[ ${{ github.event_name }} == 'push' && ${{ github.ref_type }} == 'tag' ]]; then
          #  SONAR_PARAMETERS="$SONAR_PARAMETERS -Dsonar.branch.name=${{ github.event.repository.default_branch }}"
          #fi

          ./mvnw $MAVEN_CLI_OPTS sonar:sonar ${SONAR_PARAMETERS}

      - name: sonarqube quality gate check
        if: (github.event_name == 'pull_request') && (! inputs.skip_quality_gate_check)
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        with:
          scanMetadataReportFile: target/sonar/report-task.txt

  package:
    name: package
    runs-on: live
    needs:
      - test
    if: ${{ (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) || (github.event_name == 'push' && github.ref_type == 'tag') }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.jdk_version }}
          distribution: 'temurin'
          cache: 'maven'
          overwrite-settings: false

      - name: create settings.xml
        run: echo ${{ secrets.maven_settings }} | base64 -d > ~/.m2/settings.xml

      - name: package artifact
        id: package_artifact
        run: ./mvnw $MAVEN_CLI_OPTS package -Dmaven.test.skip=true

      - name: Archive Application Artifact
        uses: RocketBus/actions/.github/actions/utils/s3-artifact-upload@acme-3879
        with:
          name: app-artifact
          bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}
          paths: |
            **/target/*.jar
            **/target/*.war

  release:
    name: release
    runs-on: live
    needs:
      - package
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Download Application Artifact
        uses: RocketBus/actions/.github/actions/utils/s3-artifact-download@acme-3879
        with:
          name: app-artifact
          bucket_region: ${{ vars.ARTIFACTS_BUCKET_REGION }}
          bucket_name: ${{ vars.ARTIFACTS_BUCKET_NAME }}
          actions_iam_role: ${{ vars.ACTIONS_IAM_ROLE }}

      - name: create github release
        uses: softprops/action-gh-release@v1
