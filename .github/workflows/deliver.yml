name: Deliver workflow

on:
  workflow_call:
    inputs:
      jdk_version:
        type: string
        required: false
        default: "11"
      node_package_manager:
        type: string
        required: false
        default: 'yarn'
      node_version:
        type: string
        required: false
        default: "lts/*"
      php_version:
        type: string
        required: false
        default: "latest"
      project_language:
        type: string
        required: false
        default: ""
      pre_release_tag:
        type: string
        required: false
        default: ""
      release_tag:
        type: string
        required: false
        default: ""
      image_repository:
        type: string
        required: false
        default: ""
      promote_image:
        type: boolean
        required: false
        default: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

env:
  AWS_REGION: us-east-2

jobs:
  release:
    name: Release
    runs-on: live
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Pre-Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ inputs.pre_release_tag }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: ${{ github.event_name == 'workflow_dispatch' && github.ref_name == github.event.repository.default_branch }}
        with:
          prerelease: false
          tag_name: ${{ inputs.release_tag }}

  publish_artifact:
    name: Publish artifact
    runs-on: live
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifact

      ###### Publish Java

      - name: Java | Set up JDK
        uses: actions/setup-java@v3
        if: ${{ inputs.project_language == 'java' }}
        with:
          java-version: ${{ inputs.jdk_version }}
          distribution: 'adopt'
          cache: 'maven'

      - name: Java | Publish
        if: ${{ inputs.project_language == 'java' }}
        run: echo ''

      ###### Publish Javascript

      - name: Javascript | Setup Node.js
        uses: actions/setup-node@v3
        if: ${{ inputs.project_language == 'javascript' }}
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.node_package_manager }}

      - name: Javascript | Publishapp_version
        if: ${{ inputs.project_language == 'javascript' }}
        run: echo ''

      ###### Publish PHP

      - name: PHP | Publish
        if: ${{ inputs.project_language == 'php' }}
        run: echo ''

  publish_docker:
    name: Publish Docker
    runs-on: live
    steps:
      - name: Docker | Set up Docker Context for Buildx
        id: buildx-context
        run: docker context create builders

      - name: Docker | Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker retag
        if: ${{ inputs.promote_image }}
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ inputs.image_repository }} --image-ids imageTag=${{ inputs.source_image_tag }} --output json | jq --raw-output --join-output '.images[0].imageManifest')
          aws ecr put-image --repository-name ${{ inputs.image_repository }} --image-tag ${{ inputs.app_version }} --image-manifest "$MANIFEST"

      - name: Download artifact
        if: ${{ !inputs.promote_image }}
        uses: actions/download-artifact@v3
        with:
          name: container-image

      - name: Docker push
        if: ${{ !inputs.promote_image }}
        run: |
          aws ecr describe-repositories \
            --repository-names ${{ inputs.image_repository }} 2> /dev/null
          
          [[ $? -ne 0 ]] && aws ecr create-repository --repository-name ${{ inputs.image_repository }} --image-scanning-configuration scanOnPush=true
          docker load --input image.tar
          docker push ${{ steps.login_ecr.outputs.registry }}/${{ inputs.image_repository }}:${{ inputs.app_version }}