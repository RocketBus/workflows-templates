name: Deliver workflow

on:
  workflow_call:
    inputs:
      jdk_version:
        type: string
        required: false
        default: "11"
      node_package_manager:
        type: string
        required: false
        default: 'yarn'
      node_version:
        type: string
        required: false
        default: "lts/*"
      php_version:
        type: string
        required: false
        default: "latest"
      project_language:
        type: string
        required: false
        default: ""
      pre_release:
        type: boolean
        required: false
        default: false
      pre_release_tag:
        type: string
        required: false
        default: ""
      release_tag:
        type: string
        required: false
        default: ""
      image_repository:
        type: string
        required: false
        default: ""
      promote_version:
        type: boolean
        required: false
        default: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

env:
  AWS_REGION: us-east-1

release:
  name: Release
  runs-on: live
  if: ${{ github.ref_name == github.event.repository.default_branch }}
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: ${{ inputs.pre_release }}
        tag_name: ${{ inputs.release_tag }}

jobs:
  publish_docker:
    name: Publish Docker
    runs-on: live
    steps:
      - name: Docker | Set up Docker Context for Buildx
        id: buildx-context
        run: docker context create builders

      - name: Docker | Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker retag
        if: ${{ inputs.promote_version }}
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ inputs.image_repository }} --image-ids imageTag=${{ inputs.source_image_tag }} --output json | jq --raw-output --join-output '.images[0].imageManifest')
          aws ecr put-image --repository-name ${{ inputs.image_repository }} --image-tag ${{ inputs.app_version }} --image-manifest "$MANIFEST"

      - name: Download artifact
        if: ${{ !inputs.promote_version }}
        uses: actions/download-artifact@v3
        with:
          name: container-image

      - name: Docker push
        if: ${{ !inputs.promote_version }}
        run: |
          aws ecr describe-repositories \
            --repository-names ${{ inputs.image_repository }} 2> /dev/null
          
          [[ $? -ne 0 ]] && aws ecr create-repository --repository-name ${{ inputs.image_repository }} --image-scanning-configuration scanOnPush=true

          aws ecr set-repository-policy \
            --repository-name ${{ inputs.image_repository }} \
            --policy-text '
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "CrossAccountContainerRegistry",
                    "Action": [
                      "ecr:GetAuthorizationToken",
                      "ecr:BatchCheckLayerAvailability",
                      "ecr:GetDownloadUrlForLayer",
                      "ecr:GetRepositoryPolicy",
                      "ecr:DescribeRepositories",
                      "ecr:ListImages",
                      "ecr:DescribeImages",
                      "ecr:BatchGetImage",
                      "ecr:GetLifecyclePolicy",
                      "ecr:GetLifecyclePolicyPreview",
                      "ecr:ListTagsForResource",
                      "ecr:DescribeImageScanFindings"
                    ],
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": [
                        "arn:aws:iam::180811438061:root",
                        "arn:aws:iam::406026015868:root",
                        "arn:aws:iam::114395709799:root"
                      ]
                    }
                  }
                ]
              }
            '

          docker load --input image.tar
          docker push ${{ steps.login_ecr.outputs.registry }}/${{ inputs.image_repository }}:${{ inputs.app_version }}