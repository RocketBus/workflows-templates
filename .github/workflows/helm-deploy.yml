name: Helm Deploy

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      chart_name:
        type: string
        required: true
      chart_version:
        type: string
        required: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

env:
  CHART_NAME: ${{ inputs.chart_name }}
  ENVIRONMENT: ${{ inputs.environment }}
  REPOSITORY_NAME: ${{ github.event.repository.name }}

jobs:
  deploy:
    name: Deploy
    environment: ${{ inputs.environment }}
    runs-on: 
      - self-hosted
      - live
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ vars.HELM_VERSION }}

      - name: Get Environment Specs
        id: environment_specs
        run: |
          echo aws-region=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."aws-region"') >> $GITHUB_OUTPUT
          echo aws-iam-role=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."aws-iam-role"') >> $GITHUB_OUTPUT
          echo cluster-name=$(echo $ENV_SPEC | jq -r --arg ENVIRONMENT $ENVIRONMENT '.[$ENVIRONMENT]."cluster-name"') >> $GITHUB_OUTPUT
        env:
          ENV_SPEC: ${{ vars.ENV_SPEC }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ steps.environment_specs.outputs.aws-region }}
          role-skip-session-tagging: true
          role-to-assume: ${{ steps.environment_specs.outputs.aws-iam-role }}
          role-duration-seconds: 1200
          role-session-name: GitHubActionsDeploySession

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name $CLUSTER_NAME
        env:
          CLUSTER_NAME: ${{ steps.environment_specs.outputs.cluster-name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ vars.ECR_REGION }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Helm Upgrade
        run: |
          ENVIRONMENT_PATH=charts/${CHART_NAME}/environments/${ENVIRONMENT}
          ENVIRONMENT_SECRETS_DIR=${ENVIRONMENT_PATH}/secrets.d
          ENVIRONMENT_VALUES_DIR=${ENVIRONMENT_PATH}/values.d

          HELM_ARGS="--cleanup-on-fail --history-max 3"

          if [[ -f ${ENVIRONMENT_PATH}/helmspec.yaml ]]; then
            RELEASE_NAME=$(yq '.releaseName | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
            RELEASE_NAMESPACE=$(yq '.releaseNamespace | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
            VERSION=$(yq '.version | ""' ${ENVIRONMENT_PATH}/helmspec.yaml)
          fi

          if [[ -n "$VERSION" ]]; then
            VERSION=${{ inputs.chart_version }}
          fi
          
          HELM_ARGS="$HELM_ARGS ${VERSION:+--version $VERSION}"

          if [[ -d $ENVIRONMENT_SECRETS_DIR ]]; then
            for SECRET_FILE in $(ls $ENVIRONMENT_SECRETS_DIR); do
              sops -d $ENVIRONMENT_SECRETS_DIR/$SECRET_FILE > $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec
              HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec"
            done
          fi

          if [[ -d $ENVIRONMENT_VALUES_DIR ]]; then
            for VALUES_FILE in $(ls $ENVIRONMENT_VALUES_DIR); do
              HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES_DIR/$VALUES_FILE"
            done
          fi

          if [[ -f ${ENVIRONMENT_PATH}/secrets.yaml ]]; then
            ENVIRONMENT_SECRETS="${ENVIRONMENT_PATH}/secrets.yaml"
            sops -d $ENVIRONMENT_SECRETS > ${ENVIRONMENT_SECRETS}.dec
            HELM_ARGS="$HELM_ARGS -f ${ENVIRONMENT_SECRETS}.dec"
          fi

          if [[ -f ${ENVIRONMENT_PATH}/values.yaml ]]; then
            ENVIRONMENT_VALUES="${ENVIRONMENT_PATH}/values.yaml"
            HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES"
          fi

          RELEASE_NAME=${RELEASE_NAME:-$REPOSITORY_NAME}
          RELEASE_NAMESPACE=${RELEASE_NAMESPACE:-$REPOSITORY_NAME}

          helm upgrade $RELEASE_NAME oci://${{ steps.login_ecr.outputs.registry }}/helm-charts/$CHART_NAME \
            --install \
            --namespace $RELEASE_NAMESPACE $HELM_ARGS