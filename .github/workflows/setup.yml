name: Setup Workflow

on:
  workflow_call:
    inputs:
      project_name:
        type: string
        required: false
        default: ''
      validate_branch_name:
        type: string
        required: false
        default: 'false'
      squad_name:
        type: string
        required: false
    outputs:
      project_name:
        value: ${{ jobs.preflight_checklist.outputs.project_name }}
      gitversion:
        value: ${{ jobs.preflight_checklist.outputs.gitversion }}
      squad_name:
        value: ${{ jobs.squad_name_output.outputs.squad_name }}

jobs:
  validate_branch_name:
    name: validate branch name 
    runs-on: live
    if: ${{ inputs.validate_branch_name == 'true' }}
    steps:
      - name: squad name output
        id: squad_name_output
        run: echo "squad_name=${{ github.event.inputs.squad_name }}" >> "$GITHUB_OUTPUT"

      - name: validate branch name
        if: ${{ !(github.event.inputs.squad_name == 'cabal' || github.event.inputs.squad_name == 'hive' || github.event.inputs.squad_name == 'fallen' || github.event.inputs.squad_name == 'vex' || github.event.inputs.squad_name == 'eval') }}
        run: |
             echo "::error::Branch name doesn't match the required pattern"
             exit 1
    outputs:
      squad_name: ${{ steps.squad_name_output.outputs.squad_name }}

  preflight_checklist:
    name: preflight checklist
    runs-on: live
    needs: validate_branch_name
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_type == 'branch') || (github.event_name == 'push' && github.ref_type == 'tag') || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup .NET cli
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
        
      - name: setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'

      - name: determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          additionalArguments: >
            /overrideconfig mode=ContinuousDelivery

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      - name: setup project properties
        id: project_properties
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
        run: |
          if [[ -z $PROJECT_NAME ]]; then
            PROJECT_NAME=${GITHUB_REPOSITORY#*/}
          fi

          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "gitversion={\"SemVer\": \"${GITVERSION_SEMVER}\", \"EscapedBranchName\": \"${GITVERSION_ESCAPEDBRANCHNAME}\", \"ShortSha\": \"${GITVERSION_SHORTSHA}\"}" >> $GITHUB_OUTPUT
    outputs:
      project_name: ${{ steps.project_properties.outputs.project_name }}
      gitversion: ${{ steps.project_properties.outputs.gitversion }}
