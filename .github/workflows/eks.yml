name: EKS CD

on:
  workflow_call:
    inputs:
      helm_charts_path:
        type: string
        required: false
      release_name:
        type: string
        required: false
      release_namemespace:
        type: string
        required: false
      environment:
        type: string
        required: true
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

env:
  HELM_CHARTS_PATH: ${{ inputs.helm_charts_path || format('charts/{0}', github.event.repository.name) }}

jobs:
  deploy:
    name: Deploy
    runs-on: 
      - self-hosted
      - live
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ vars.HELM_VERSION }}

      - name: Set AWS properties
        run: |
          declare -A EKS_REGIONS EKS_NAMES EKS_IAM_ROLES

          EKS_REGIONS=$VAR_EKS_REGIONS
          EKS_NAMES=$VAR_EKS_NAMES)
          EKS_IAM_ROLES=$VAR_EKS_IAM_ROLES
          echo "EKS_REGION=${EKS_REGIONS[${{ inputs.environment }}]}" >> $GITHUB_ENV
          echo "EKS_NAME=${EKS_NAMES[${{ inputs.environment }}]}" >> $GITHUB_ENV
          echo "EKS_IAM_ROLE=${EKS_IAM_ROLES[${{ inputs.environment }}]}" >> $GITHUB_ENV
        env:
          VAR_EKS_REGIONS: ${{ vars.EKS_REGIONS }}
          VAR_EKS_NAMES: ${{ vars.EKS_NAMES }}
          VAR_EKS_IAM_ROLES: ${{ vars.EKS_IAM_ROLES }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.EKS_REGION }}
          role-skip-session-tagging: true
          role-to-assume: ${{ env.EKS_IAM_ROLE }}
          role-duration-seconds: 1200
          role-session-name: GitHubActionsDeploySession

      - name: Helm Upgrade
        working-directory: ${{ env.HELM_CHARTS_PATH }}
        run: |
          aws eks update-kubeconfig --name $EKS_NAME

          HELM_ARGS="--cleanup-on-fail --history-max 4"

          ENVIRONMENT_SECRETS_DIR=environments/${{ inputs.environment }}/secrets.d
          ENVIRONMENT_VALUES_DIR=environments/${{ inputs.environment }}/values.d

          if [[ -d $ENVIRONMENT_SECRETS_DIR ]]; then
            for SECRET_FILE in $(ls $ENVIRONMENT_SECRETS_DIR); do
              sops -d $ENVIRONMENT_SECRETS_DIR/$SECRET_FILE > $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec
              HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_SECRETS_DIR/${SECRET_FILE}.dec"
            done
          fi

          if [[ -d $ENVIRONMENT_VALUES_DIR ]]; then
            for VALUES_FILE in $(ls $ENVIRONMENT_VALUES_DIR); do
              HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES_DIR/$VALUES_FILE"
            done
          fi

          if [[ -f environments/${{ inputs.environment }}/secrets.yaml ]]; then
            ENVIRONMENT_SECRETS="environments/${{ inputs.environment }}/secrets.yaml"
            sops -d $ENVIRONMENT_SECRETS > ${ENVIRONMENT_SECRETS}.dec
            HELM_ARGS="$HELM_ARGS -f ${ENVIRONMENT_SECRETS}.dec"
          fi

          if [[ -f environments/${{ inputs.environment }}/values.yaml ]]; then
            ENVIRONMENT_VALUES="environments/${{ inputs.environment }}/values.yaml"
            HELM_ARGS="$HELM_ARGS -f $ENVIRONMENT_VALUES"
          fi

          APP_VERSION=$(cat version.txt)
          yq -i '.appVersion = env(APP_VERSION)' Chart.yaml

          helm upgrade ${{ inputs.release_name || github.event.repository.name }} . \
            --install \
            --namespace ${{ inputs.release_namemespace || github.event.repository.name }} $HELM_ARGS