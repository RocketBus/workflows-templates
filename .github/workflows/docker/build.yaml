name: Docker build

on:
  workflow_call:
    inputs:
      context:
        type: string
        required: false
        default: .
      dockerfile_path:
        type: string
        required: false
        default: Dockerfile
      target:
        type: string
        required: false
        default: ""
      build_args:
        type: string
        required: false
        default: ""
      app_version:
        type: string
        required: false
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
    outputs:
      image_registry:
        value: ${{ jobs.build.outputs.image_registry }}
      image_repository:
        value: ${{ jobs.build.outputs.image_repository }}
      image_repository_uri:
        value: ${{ jobs.build.outputs.image_repository_uri }}
      image_tag:
        value: ${{ jobs.build.outputs.image_tag }}

env:
  RUNS_ON: k8s-live
  AWS_REGION: us-east-1

jobs:
  build:
    name: Build
    runs-on: ${{ env.RUNS_ON }}
    outputs:
      image_registry: ${{ steps.setup.outputs.image_registry }}
      image_repository: ${{ steps.setup.outputs.image_repository }}
      image_repository_uri: ${{ steps.setup.outputs.image_repository_uri }}
      image_tag: ${{ steps.setup.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup
        id: setup
        env:
          IMAGE_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          IMAGE_REPOSITORY: ${{ env.GITHUB_REPOSITORY }}
          IMAGE_TAG: ${{ inputs.app_version }}
        run: |
          [[ -z ${IMAGE_TAG} ]] && IMAGE_TAG=${GITHUB_SHA::7}
          echo "::set-output name=image_registry::$IMAGE_REGISTRY"
          echo "::set-output name=image_repository::$IMAGE_REPOSITORY"
          echo "::set-output name=image_repository_uri::${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}"
          echo "::set-output name=image_tag::$IMAGE_TAG"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.setup.outputs.image_repository_uri }}
          tags: |
            type=raw,value=${{ steps.setup.outputs.image_tag }}
      
      - name: Run build
        uses: docker/build-push-action@v3
        with:
          cache-from: type=registry,ref=${{ steps.setup.outputs.image_repository_uri }}:buildcache
          cache-to: type=registry,mode=max,ref=${{ steps.setup.outputs.image_repository_uri }}:buildcache,oci-mediatypes=false
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile_path }}
          target: ${{ inputs.target }}
          build-args: ${{ inputs.build_args }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: false
          outputs: type=docker,dest=build/image.tar

      - name: Archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifact
          path: build/image.tar
          retention-days: 1